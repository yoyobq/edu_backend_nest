/* eslint-disable max-lines-per-function */
// src/core/common/password/password-policy.service.spec.ts

import { Test, TestingModule } from '@nestjs/testing';
import { PasswordPolicyService } from './password-policy.service';

describe('PasswordPolicyService', () => {
  let service: PasswordPolicyService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [PasswordPolicyService],
    }).compile();

    service = module.get<PasswordPolicyService>(PasswordPolicyService);
  });

  it('Â∫îËØ•Ë¢´Ê≠£Á°ÆÂÆö‰πâ', () => {
    expect(service).toBeDefined();
  });

  describe('validatePassword - Âü∫Á°ÄÈ™åËØÅ', () => {
    it('Â∫îËØ•Êé•ÂèóÁ¨¶ÂêàÊâÄÊúâË¶ÅÊ±ÇÁöÑÂº∫ÂØÜÁ†Å', () => {
      const strongPassword = 'MyStrong2024!@#';

      const result = service.validatePassword(strongPassword);
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('Â∫îËØ•ÊãíÁªùËøáÁü≠ÁöÑÂØÜÁ†Å', () => {
      const shortPassword = '123';

      const result = service.validatePassword(shortPassword);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†ÅÈïøÂ∫¶Ëá≥Â∞ë‰∏∫ 8 ‰Ωç');
    });

    it('Â∫îËØ•ÊãíÁªùËøáÈïøÁöÑÂØÜÁ†Å', () => {
      const longPassword = 'a'.repeat(129); // Ë∂ÖËøá 128 Â≠óÁ¨¶

      const result = service.validatePassword(longPassword);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†ÅÈïøÂ∫¶‰∏çËÉΩË∂ÖËøá 128 ‰Ωç');
    });

    it('Â∫îËØ•ÊãíÁªù‰∏çÂåÖÂê´Êï∞Â≠óÁöÑÂØÜÁ†Å', () => {
      const noDigitPassword = 'MyStrongCode!@#';

      const result = service.validatePassword(noDigitPassword);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Êï∞Â≠ó');
    });

    it('Â∫îËØ•ÊãíÁªù‰∏çÂåÖÂê´Â∞èÂÜôÂ≠óÊØçÁöÑÂØÜÁ†Å', () => {
      const noLowerPassword = 'MYSTRONG2024!@#';

      const result = service.validatePassword(noLowerPassword);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Â∞èÂÜôÂ≠óÊØç');
    });

    it('Â∫îËØ•ÊãíÁªù‰∏çÂåÖÂê´Â§ßÂÜôÂ≠óÊØçÁöÑÂØÜÁ†Å', () => {
      const noUpperPassword = 'mystrong2024!@#';

      // Ê≥®ÊÑèÔºöÈªòËÆ§ÈÖçÁΩÆ‰∏≠ requireUppercase ‰∏∫ falseÔºåÊâÄ‰ª•Ëøô‰∏™ÊµãËØïÂ∫îËØ•ÈÄöËøá
      const result = service.validatePassword(noUpperPassword);
      expect(result.isValid).toBe(true);
    });

    it('Â∫îËØ•ÊãíÁªù‰∏çÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂØÜÁ†Å', () => {
      const noSpecialPassword = 'MyStrong2024abc';

      const result = service.validatePassword(noSpecialPassword);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´ÁâπÊÆäÂ≠óÁ¨¶ (!@#$%^&* Á≠â)');
    });
  });

  describe('validatePassword - Â¢ûÂº∫È¢ÑÂ§ÑÁêÜÂäüËÉΩ', () => {
    it('Â∫îËØ•ÊãíÁªùÁ©∫ÂØÜÁ†Å', () => {
      const result = service.validatePassword('');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫ÊàñÁ∫ØÁ©∫ÁôΩÂ≠óÁ¨¶');
    });

    it('Â∫îËØ•ÊãíÁªùÁ∫ØÁ©∫ÁôΩÂ≠óÁ¨¶ÂØÜÁ†Å', () => {
      const result1 = service.validatePassword('   ');
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫ÊàñÁ∫ØÁ©∫ÁôΩÂ≠óÁ¨¶');

      const result2 = service.validatePassword('\t\n  ');
      expect(result2.isValid).toBe(false);
      expect(result2.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫ÊàñÁ∫ØÁ©∫ÁôΩÂ≠óÁ¨¶');
    });

    it('Â∫îËØ•ÊãíÁªùÂåÖÂê´È¶ñÂ∞æÁ©∫Ê†ºÁöÑÂØÜÁ†Å', () => {
      const result1 = service.validatePassword(' MyStrong2024!@#');
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†ÅÈ¶ñÂ∞æ‰∏çËÉΩÂåÖÂê´Á©∫Ê†º');

      const result2 = service.validatePassword('MyStrong2024!@# ');
      expect(result2.isValid).toBe(false);
      expect(result2.errors).toContain('ÂØÜÁ†ÅÈ¶ñÂ∞æ‰∏çËÉΩÂåÖÂê´Á©∫Ê†º');

      const result3 = service.validatePassword('  MyStrong2024!@#  ');
      expect(result3.isValid).toBe(false);
      expect(result3.errors).toContain('ÂØÜÁ†ÅÈ¶ñÂ∞æ‰∏çËÉΩÂåÖÂê´Á©∫Ê†º');
    });

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜ NFKC ËßÑËåÉÂåñ - ÂÖ®ËßíÂ≠óÁ¨¶', () => {
      // ÂÖ®ËßíÂ≠óÁ¨¶Â∫îËØ•Ë¢´ËßÑËåÉÂåñ‰∏∫ÂçäËßíÂ≠óÁ¨¶
      const fullWidthPassword = 'Ôº≠ÔΩôÔº≥ÔΩîÔΩíÔΩèÔΩéÔΩáÔºíÔºêÔºíÔºîÔºÅÔº†ÔºÉ';

      const result = service.validatePassword(fullWidthPassword);
      expect(result.isValid).toBe(true);
    });

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜ NFKC ËßÑËåÉÂåñ - ÂÖºÂÆπÂ≠óÁ¨¶', () => {
      // ÂÖºÂÆπÂ≠óÁ¨¶Â∫îËØ•Ë¢´ËßÑËåÉÂåñ
      const compatibilityPassword = 'MyStrong‚ë†‚ë°‚ë¢!@#'; // Â∏¶ÂúàÊï∞Â≠ó

      const result = service.validatePassword(compatibilityPassword);
      expect(result.isValid).toBe(true);
    });

    it('Â∫îËØ•ÊãíÁªùÂåÖÂê´ÁâπÊÆä Unicode Á©∫Ê†ºÁöÑÂØÜÁ†Å', () => {
      // ‰∏çÈó¥Êñ≠Á©∫Ê†º (U+00A0)
      const nonBreakingSpacePassword = 'MyStrong2024!@#\u00A0';

      const result1 = service.validatePassword(nonBreakingSpacePassword);
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†ÅÈ¶ñÂ∞æ‰∏çËÉΩÂåÖÂê´Á©∫Ê†º');

      // ÂÖ®ËßíÁ©∫Ê†º (U+3000)
      const fullWidthSpacePassword = '\u3000MyStrong2024!@#';

      const result2 = service.validatePassword(fullWidthSpacePassword);
      expect(result2.isValid).toBe(false);
      expect(result2.errors).toContain('ÂØÜÁ†ÅÈ¶ñÂ∞æ‰∏çËÉΩÂåÖÂê´Á©∫Ê†º');
    });
  });

  describe('validatePassword - ÈªëÂêçÂçïÊ£ÄÊü•', () => {
    it('Â∫îËØ•ÊãíÁªùÂåÖÂê´Â∏∏ËßÅÂº±ÂØÜÁ†ÅÁâáÊÆµÁöÑÂØÜÁ†Å', () => {
      const result1 = service.validatePassword('Password123!');
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†ÅÂåÖÂê´Â∏∏ËßÅÁöÑÂº±ÂØÜÁ†ÅÁâáÊÆµÔºåËØ∑ÈÅøÂÖç‰ΩøÁî®');

      const result2 = service.validatePassword('Admin123!');
      expect(result2.isValid).toBe(false);
      expect(result2.errors).toContain('ÂØÜÁ†ÅÂåÖÂê´Â∏∏ËßÅÁöÑÂº±ÂØÜÁ†ÅÁâáÊÆµÔºåËØ∑ÈÅøÂÖç‰ΩøÁî®');

      const result3 = service.validatePassword('Qwerty123!');
      expect(result3.isValid).toBe(false);
      expect(result3.errors).toContain('ÂØÜÁ†ÅÂåÖÂê´Â∏∏ËßÅÁöÑÂº±ÂØÜÁ†ÅÁâáÊÆµÔºåËØ∑ÈÅøÂÖç‰ΩøÁî®');
    });

    it('Â∫îËØ•ÊãíÁªùÂåÖÂê´ÈîÆÁõòÂ∫èÂàóÁöÑÂØÜÁ†Å', () => {
      const result1 = service.validatePassword('Qwerty123!');
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†ÅÂåÖÂê´Â∏∏ËßÅÁöÑÂº±ÂØÜÁ†ÅÁâáÊÆµÔºåËØ∑ÈÅøÂÖç‰ΩøÁî®');

      const result2 = service.validatePassword('Asdfgh123!');
      expect(result2.isValid).toBe(false);
      expect(result2.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó');

      const result3 = service.validatePassword('Zxcvbn123!');
      expect(result3.isValid).toBe(false);
      expect(result3.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó');
    });
  });

  describe('validatePassword - Ê®°ÂºèÊ£ÄÊü•', () => {
    it('Â∫îËØ•ÊãíÁªùÁÆÄÂçïÁöÑÈáçÂ§çÊ®°Âºè', () => {
      const result1 = service.validatePassword('Aaaa1111!!!!');
      expect(result1.isValid).toBe(false);
      expect(result1.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøáÂ§öÈáçÂ§çÂ≠óÁ¨¶');

      // Ëøô‰∏™ÂØÜÁ†ÅÂÆûÈôÖ‰∏ä‰∏ç‰ºöË¢´ÊãíÁªùÔºåÂõ†‰∏∫Ê®°Âºè‰∏çÂ§üÁÆÄÂçï
      const result2 = service.validatePassword('MyStrong2024!@#$');
      expect(result2.isValid).toBe(true);
    });

    it('Â∫îËØ•ÊãíÁªùÁÆÄÂçïÁöÑÈÄíÂ¢ûÂ∫èÂàó', () => {
      const result = service.validatePassword('Abcd1234!');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó');
    });

    it('Â∫îËØ•ÊãíÁªùÁÆÄÂçïÁöÑÈÄíÂáèÂ∫èÂàó', () => {
      const result = service.validatePassword('Dcba4321!');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó');
    });
  });

  describe('validatePassword - Âº∫Â∫¶ËØÑÂàÜ', () => {
    it('Â∫îËØ•‰∏∫Âº∫ÂØÜÁ†ÅËøîÂõûÈ´òÂàÜ', () => {
      const strongPassword = 'MyVeryStrong&ComplexCode2024!@#$';

      const result = service.validatePassword(strongPassword);
      expect(result.isValid).toBe(true);
      expect(result.strength).toBeGreaterThan(70);
    });

    it('Â∫îËØ•‰∏∫ÁÆÄÂçï‰ΩÜÊúâÊïàÁöÑÂØÜÁ†ÅËøîÂõûËæÉ‰ΩéÂàÜÊï∞', () => {
      // Ëøô‰∏™ÂØÜÁ†ÅÊª°Ë∂≥Âü∫Êú¨Ë¶ÅÊ±ÇÔºå‰ΩÜÂº∫Â∫¶ËæÉ‰Ωé
      const weakPassword = 'Simple1!';

      const result = service.validatePassword(weakPassword);
      expect(result.isValid).toBe(true);
      expect(result.strength).toBeGreaterThan(0);
    });
  });

  describe('validatePassword - ËæπÁïåÊÉÖÂÜµ', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊúÄÂ∞èÈïøÂ∫¶ÁöÑÂº∫ÂØÜÁ†Å', () => {
      const minLengthPassword = 'MyStr0ng!'; // ÊÅ∞Â•Ω 8 ‰∏™Â≠óÁ¨¶

      const result = service.validatePassword(minLengthPassword);
      expect(result.isValid).toBe(true);
    });

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊúÄÂ§ßÈïøÂ∫¶ÁöÑÂØÜÁ†Å', () => {
      // ÊûÑÈÄ†‰∏Ä‰∏™ÊÅ∞Â•Ω 128 Â≠óÁ¨¶ÁöÑÂº∫ÂØÜÁ†ÅÔºåÈÅøÂÖçËøûÁª≠Â∫èÂàóÂíåÈáçÂ§çÂ≠óÁ¨¶
      const maxLengthPassword =
        'MyVeryStrong&Complex2024!@#$%^&*()_+' +
        'BdFhJkMnPqRtVwXzAcEgIlNoSuYbDfHj' +
        'QsWvZxCeGiKmOrTyUaBdFhJkMnPqRtVw' +
        'XzAcEgIlNoSuYbDfHjLpQsWvZx13';

      expect(maxLengthPassword.length).toBe(128);
      const result = service.validatePassword(maxLengthPassword);
      // Ëøô‰∏™ÂØÜÁ†Å‰ºöË¢´ÊãíÁªùÔºåÂõ†‰∏∫ÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('ÂØÜÁ†Å‰∏çËÉΩÂåÖÂê´ËøûÁª≠ÁöÑÂ≠óÁ¨¶Â∫èÂàó');
    });

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂåÖÂê´ emoji ÁöÑÂØÜÁ†Å', () => {
      const emojiPassword = 'MyStrong123!üòÄüîí';

      const result = service.validatePassword(emojiPassword);
      expect(result.isValid).toBe(true);
    });

    it('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÂåÖÂê´‰∏≠ÊñáÂ≠óÁ¨¶ÁöÑÂØÜÁ†Å', () => {
      const chinesePassword = 'MyStrong123!ÂØÜÁ†Å';

      const result = service.validatePassword(chinesePassword);
      expect(result.isValid).toBe(true);
    });
  });
});
