// src/core/common/errors/domain-error.ts
// 领域错误与错误码：跨层共享的核心错误定义

/**
 * 领域错误类
 * 用于表示业务逻辑层的错误，可在 Service、Usecase 和 Adapter 层之间传递
 */
export class DomainError extends Error {
  readonly code: string;
  readonly details?: unknown;
  readonly cause?: unknown;

  constructor(code: string, message: string, details?: unknown, cause?: unknown) {
    super(message);
    this.name = 'DomainError';
    this.code = code;
    this.details = details;
    this.cause = cause;

    // 兼容某些编译目标/测试环境的原型链问题，确保 instanceof 正常
    Object.setPrototypeOf(this, new.target.prototype);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, DomainError);
    }
  }

  toJSON() {
    return { name: this.name, code: this.code, message: this.message, details: this.details };
  }
}

// 认证相关错误码（登录/刷新/鉴权）
export const AUTH_ERROR = {
  ACCOUNT_NOT_FOUND: 'ACCOUNT_NOT_FOUND',
  ACCOUNT_BANNED: 'ACCOUNT_BANNED',
  ACCOUNT_INACTIVE: 'ACCOUNT_INACTIVE',
  INVALID_PASSWORD: 'INVALID_PASSWORD',
  INVALID_REFRESH_TOKEN: 'INVALID_REFRESH_TOKEN',
  INVALID_AUDIENCE: 'INVALID_AUDIENCE',
} as const;
Object.freeze(AUTH_ERROR);

// 账户领域错误码（账户资料/唯一性约束等）
export const ACCOUNT_ERROR = {
  ACCOUNT_ALREADY_EXISTS: 'ACCOUNT_ALREADY_EXISTS',
  NICKNAME_ALREADY_EXISTS: 'NICKNAME_ALREADY_EXISTS',
  REGISTRATION_FAILED: 'REGISTRATION_FAILED',
  OPERATION_NOT_SUPPORTED: 'OPERATION_NOT_SUPPORTED',
  ACCOUNT_NOT_FOUND: AUTH_ERROR.ACCOUNT_NOT_FOUND, // 复用同一码值，避免前端分裂
  NICKNAME_TAKEN: 'NICKNAME_TAKEN',
  EMAIL_TAKEN: 'EMAIL_TAKEN',
  USER_INFO_NOT_FOUND: 'USER_INFO_NOT_FOUND',
  ACCOUNT_SUSPENDED: 'ACCOUNT_SUSPENDED',
} as const;
Object.freeze(ACCOUNT_ERROR);

// 第三方认证相关错误码
// 在 THIRDPARTY_ERROR 中添加新的错误码
export const THIRDPARTY_ERROR = {
  CREDENTIAL_INVALID: 'THIRDPARTY_CREDENTIAL_INVALID',
  ACCOUNT_NOT_BOUND: 'THIRDPARTY_ACCOUNT_NOT_BOUND',
  LOGIN_FAILED: 'THIRDPARTY_LOGIN_FAILED',
  BIND_FAILED: 'THIRDPARTY_BIND_FAILED',
  UNBIND_FAILED: 'THIRDPARTY_UNBIND_FAILED',
  PROVIDER_NOT_SUPPORTED: 'THIRDPARTY_PROVIDER_NOT_SUPPORTED',
  ACCOUNT_ALREADY_BOUND: 'THIRDPARTY_ACCOUNT_ALREADY_BOUND',
  REGISTRATION_FAILED: 'THIRDPARTY_REGISTRATION_FAILED', // 第三方注册失败
  INVALID_AUDIENCE: 'THIRDPARTY_INVALID_AUDIENCE',
  INVALID_USER_INFO: 'THIRDPARTY_INVALID_USER_INFO',
  NICKNAME_INVALID: 'THIRDPARTY_NICKNAME_INVALID',
  INVALID_PARAMS: 'THIRDPARTY_INVALID_PARAMS',
  // 新增的错误码
  USER_NOT_FOUND: 'THIRDPARTY_USER_NOT_FOUND',
  PROVIDER_API_ERROR: 'THIRDPARTY_PROVIDER_API_ERROR',
  UNKNOWN_ERROR: 'THIRDPARTY_UNKNOWN_ERROR',
  INVALID_CREDENTIAL: 'THIRDPARTY_CREDENTIAL_INVALID', // 映射到现有的 CREDENTIAL_INVALID
} as const;
Object.freeze(THIRDPARTY_ERROR);

// JWT 相关错误码（Token 生成、验证、解析等）
export const JWT_ERROR = {
  TOKEN_EXPIRED: 'JWT_TOKEN_EXPIRED',
  TOKEN_INVALID: 'JWT_TOKEN_INVALID',
  TOKEN_NOT_BEFORE: 'JWT_TOKEN_NOT_BEFORE',
  TOKEN_GENERATION_FAILED: 'JWT_TOKEN_GENERATION_FAILED',
  TOKEN_VERIFICATION_FAILED: 'JWT_TOKEN_VERIFICATION_FAILED',
  ACCESS_TOKEN_GENERATION_FAILED: 'JWT_ACCESS_TOKEN_GENERATION_FAILED',
  REFRESH_TOKEN_GENERATION_FAILED: 'JWT_REFRESH_TOKEN_GENERATION_FAILED',
  AUTHENTICATION_FAILED: 'JWT_AUTHENTICATION_FAILED',
} as const;
Object.freeze(JWT_ERROR);

// 权限相关错误码（角色权限、访问控制等）
export const PERMISSION_ERROR = {
  INSUFFICIENT_PERMISSIONS: 'INSUFFICIENT_PERMISSIONS',
  ACCESS_DENIED: 'ACCESS_DENIED',
  ROLE_REQUIRED: 'ROLE_REQUIRED',
} as const;
Object.freeze(PERMISSION_ERROR);

// 验证记录相关错误码
export const VERIFICATION_RECORD_ERROR = {
  CREATION_FAILED: 'VERIFICATION_RECORD_CREATION_FAILED',
  QUERY_FAILED: 'VERIFICATION_RECORD_QUERY_FAILED',
  RECORD_NOT_FOUND: 'VERIFICATION_RECORD_NOT_FOUND',
  RECORD_NOT_ACTIVE: 'VERIFICATION_RECORD_NOT_ACTIVE',
  RECORD_EXPIRED: 'VERIFICATION_RECORD_EXPIRED',
  RECORD_NOT_ACTIVE_YET: 'VERIFICATION_RECORD_NOT_ACTIVE_YET',
  RECORD_ALREADY_CONSUMED: 'VERIFICATION_RECORD_ALREADY_CONSUMED',
  INVALID_TOKEN: 'VERIFICATION_RECORD_INVALID_TOKEN',
  TARGET_ACCOUNT_MISMATCH: 'VERIFICATION_RECORD_TARGET_ACCOUNT_MISMATCH',
  TYPE_MISMATCH: 'VERIFICATION_RECORD_TYPE_MISMATCH',
  UPDATE_FAILED: 'VERIFICATION_RECORD_UPDATE_FAILED',
  STATUS_NOT_ALLOWED: 'VERIFICATION_RECORD_STATUS_NOT_ALLOWED',
  CONSUMPTION_FAILED: 'VERIFICATION_RECORD_CONSUMPTION_FAILED',
  REVOCATION_FAILED: 'VERIFICATION_RECORD_REVOCATION_FAILED',
  VERIFICATION_INVALID: 'VERIFICATION_RECORD_VERIFICATION_INVALID',
  INVALID_PARAMS: 'VERIFICATION_RECORD_INVALID_PARAMS',
  INVALID_TYPE: 'VERIFICATION_RECORD_INVALID_TYPE',
} as const;
Object.freeze(VERIFICATION_RECORD_ERROR);

// 类型辅助
export type AuthErrorCode = (typeof AUTH_ERROR)[keyof typeof AUTH_ERROR];
export type AccountErrorCode = (typeof ACCOUNT_ERROR)[keyof typeof ACCOUNT_ERROR];
export type ThirdPartyErrorCode = (typeof THIRDPARTY_ERROR)[keyof typeof THIRDPARTY_ERROR];
export type JwtErrorCode = (typeof JWT_ERROR)[keyof typeof JWT_ERROR];
export type PermissionErrorCode = (typeof PERMISSION_ERROR)[keyof typeof PERMISSION_ERROR];
export type VerificationRecordErrorCode =
  (typeof VERIFICATION_RECORD_ERROR)[keyof typeof VERIFICATION_RECORD_ERROR];

// 类型守卫：统一判断是否为领域错误（兼容多包/反序列化场景）
export const isDomainError = (error: unknown): error is DomainError => {
  if (error instanceof DomainError) return true;
  if (!error || typeof error !== 'object') return false;
  const anyE = error as { name?: unknown; code?: unknown };
  return anyE?.name === 'DomainError' && typeof anyE?.code === 'string';
};
